!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#loc9 = loc("acc_c1.c":5:11)
#loc10 = loc("acc_c1.c":5:15)
#loc11 = loc("acc_c1.c":5:21)
#loc12 = loc("acc_c1.c":5:32)
#loc97 = loc(fused[#loc9, #loc10])
#loc98 = loc(fused[#loc11, #loc12])
module attributes {cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.legal_int_widths" = array<i32: 8, 16, 32, 64>, "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i loc(#loc93)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> loc(#loc94)
  cir.func private @free(!cir.ptr<!void>) loc(#loc95)
  cir.func dso_local @main(%arg0: !s32i loc(fused[#loc9, #loc10]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc11, #loc12])) -> !s32i {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc98)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc8)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["n"] {alignment = 4 : i64} loc(#loc99)
    %4 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["a"] {alignment = 8 : i64} loc(#loc100)
    %5 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["r"] {alignment = 8 : i64} loc(#loc101)
    %6 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["e"] {alignment = 8 : i64} loc(#loc102)
    %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc23)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc23)
    cir.scope {
      %46 = cir.load align(4) %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %47 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %48 = cir.cmp(gt, %46, %47) : !s32i, !cir.bool loc(#loc28)
      cir.if %48 {
        %49 = cir.const #cir.int<1> : !s32i loc(#loc32)
        %50 = cir.load align(8) %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc33)
        %51 = cir.ptr_stride(%50 : !cir.ptr<!cir.ptr<!s8i>>, %49 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc34)
        %52 = cir.load align(8) %51 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
        %53 = cir.call @atoi(%52) nothrow side_effect(pure) : (!cir.ptr<!s8i>) -> !s32i loc(#loc35)
        cir.store align(4) %53, %3 : !s32i, !cir.ptr<!s32i> loc(#loc106)
      } else {
        %49 = cir.const #cir.int<100000> : !s32i loc(#loc25)
        cir.store align(4) %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc107)
      } loc(#loc105)
    } loc(#loc104)
    cir.scope {
      %46 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      %47 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %48 = cir.cmp(le, %46, %47) : !s32i, !cir.bool loc(#loc40)
      cir.if %48 {
        %49 = cir.const #cir.int<100000> : !s32i loc(#loc37)
        cir.store align(4) %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc109)
      } loc(#loc109)
    } loc(#loc108)
    %8 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc42)
    %10 = cir.const #cir.int<4> : !u64i loc(#loc110)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc111)
    %12 = cir.call @malloc(%11) nothrow : (!u64i) -> !cir.ptr<!void> loc(#loc45)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!cir.float> loc(#loc112)
    cir.store align(8) %13, %4 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc113)
    %14 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc48)
    %16 = cir.const #cir.int<4> : !u64i loc(#loc114)
    %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc115)
    %18 = cir.call @malloc(%17) nothrow : (!u64i) -> !cir.ptr<!void> loc(#loc51)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!cir.float> loc(#loc116)
    cir.store align(8) %19, %5 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc117)
    %20 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc54)
    %22 = cir.const #cir.int<4> : !u64i loc(#loc118)
    %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc119)
    %24 = cir.call @malloc(%23) nothrow : (!u64i) -> !cir.ptr<!void> loc(#loc57)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!cir.float> loc(#loc120)
    cir.store align(8) %25, %6 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc121)
    %26 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %27 = builtin.unrealized_conversion_cast %26 : !s32i to si32 loc(#loc60)
    %28 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %29 = builtin.unrealized_conversion_cast %28 : !s32i to si32 loc(#loc61)
    %c0_i64 = arith.constant 0 : i64 loc(#loc62)
    %c1_i64 = arith.constant 1 : i64 loc(#loc62)
    %30 = acc.bounds lowerbound(%27 : si32) extent(%29 : si32) stride(%c1_i64 : i64) startIdx(%c0_i64 : i64) loc(#loc62)
    %31 = acc.copyin varPtr(%4 : !cir.ptr<!cir.ptr<!cir.float>>) bounds(%30) -> !cir.ptr<!cir.ptr<!cir.float>> {name = "a[0:n]"} loc(#loc62)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %33 = builtin.unrealized_conversion_cast %32 : !s32i to si32 loc(#loc63)
    %34 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %35 = builtin.unrealized_conversion_cast %34 : !s32i to si32 loc(#loc64)
    %c0_i64_0 = arith.constant 0 : i64 loc(#loc65)
    %c1_i64_1 = arith.constant 1 : i64 loc(#loc65)
    %36 = acc.bounds lowerbound(%33 : si32) extent(%35 : si32) stride(%c1_i64_1 : i64) startIdx(%c0_i64_0 : i64) loc(#loc65)
    %37 = acc.create varPtr(%5 : !cir.ptr<!cir.ptr<!cir.float>>) bounds(%36) -> !cir.ptr<!cir.ptr<!cir.float>> {dataClause = #acc<data_clause acc_copyout>, name = "r[0:n]"} loc(#loc65)
    acc.kernels combined(loop) dataOperands(%31, %37 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.ptr<!cir.float>>) {
      acc.loop combined(kernels) {
        cir.scope {
          %46 = cir.const #cir.int<0> : !s32i loc(#loc69)
          cir.store align(4) %46, %7 : !s32i, !cir.ptr<!s32i> loc(#loc123)
          cir.for : cond {
            %47 = cir.load align(4) %7 : !cir.ptr<!s32i>, !s32i loc(#loc71)
            %48 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            %49 = cir.cmp(lt, %47, %48) : !s32i, !cir.bool loc(#loc73)
            cir.condition(%49) loc(#loc73)
          } body {
            cir.scope {
              %47 = cir.load align(4) %7 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %48 = cir.load align(8) %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc76)
              %49 = cir.ptr_stride(%48 : !cir.ptr<!cir.float>, %47 : !s32i), !cir.ptr<!cir.float> loc(#loc77)
              %50 = cir.load align(4) %49 : !cir.ptr<!cir.float>, !cir.float loc(#loc76)
              %51 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc78)
              %52 = cir.binop(mul, %50, %51) : !cir.float loc(#loc125)
              %53 = cir.load align(4) %7 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %54 = cir.load align(8) %5 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc80)
              %55 = cir.ptr_stride(%54 : !cir.ptr<!cir.float>, %53 : !s32i), !cir.ptr<!cir.float> loc(#loc81)
              cir.store align(4) %52, %55 : !cir.float, !cir.ptr<!cir.float> loc(#loc126)
            } loc(#loc124)
            cir.yield loc(#loc68)
          } step {
            %47 = cir.load align(4) %7 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %48 = cir.unary(inc, %47) nsw : !s32i, !s32i loc(#loc82)
            cir.store align(4) %48, %7 : !s32i, !cir.ptr<!s32i> loc(#loc127)
            cir.yield loc(#loc122)
          } loc(#loc122)
        } loc(#loc122)
        acc.yield loc(#loc84)
      } attributes {auto_ = [#acc.device_type<none>]} loc(#loc66)
      acc.terminator loc(#loc84)
    } loc(#loc66)
    acc.copyout accPtr(%37 : !cir.ptr<!cir.ptr<!cir.float>>) bounds(%36) to varPtr(%5 : !cir.ptr<!cir.ptr<!cir.float>>) {name = "r[0:n]"} loc(#loc65)
    acc.delete accPtr(%31 : !cir.ptr<!cir.ptr<!cir.float>>) bounds(%30) {dataClause = #acc<data_clause acc_copyin>, name = "a[0:n]"} loc(#loc62)
    %38 = cir.load align(8) %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc85)
    %39 = cir.cast(bitcast, %38 : !cir.ptr<!cir.float>), !cir.ptr<!void> loc(#loc85)
    cir.call @free(%39) nothrow : (!cir.ptr<!void>) -> () loc(#loc86)
    %40 = cir.load align(8) %5 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc87)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!cir.float>), !cir.ptr<!void> loc(#loc87)
    cir.call @free(%41) nothrow : (!cir.ptr<!void>) -> () loc(#loc88)
    %42 = cir.load align(8) %6 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc89)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!cir.float>), !cir.ptr<!void> loc(#loc89)
    cir.call @free(%43) nothrow : (!cir.ptr<!void>) -> () loc(#loc90)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %44, %2 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %45 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.return %45 : !s32i loc(#loc128)
  } loc(#loc96)
} loc(#loc)
#loc = loc(unknown)
#loc1 = loc("/usr/include/stdlib.h":105:1)
#loc2 = loc("/usr/include/stdlib.h":106:33)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("acc_c1.c":5:1)
#loc8 = loc("acc_c1.c":56:1)
#loc13 = loc("acc_c1.c":7:5)
#loc14 = loc("acc_c1.c":7:9)
#loc15 = loc("acc_c1.c":8:5)
#loc16 = loc("acc_c1.c":8:12)
#loc17 = loc("acc_c1.c":9:5)
#loc18 = loc("acc_c1.c":9:21)
#loc19 = loc("acc_c1.c":10:5)
#loc20 = loc("acc_c1.c":10:12)
#loc21 = loc("acc_c1.c":11:5)
#loc22 = loc("acc_c1.c":11:9)
#loc23 = loc("acc_c1.c":6:1)
#loc24 = loc("acc_c1.c":13:5)
#loc25 = loc("acc_c1.c":16:13)
#loc26 = loc("acc_c1.c":13:9)
#loc27 = loc("acc_c1.c":13:16)
#loc28 = loc("acc_c1.c":13:14)
#loc29 = loc("acc_c1.c":14:9)
#loc30 = loc("acc_c1.c":14:27)
#loc31 = loc("acc_c1.c":16:9)
#loc32 = loc("acc_c1.c":14:24)
#loc33 = loc("acc_c1.c":14:19)
#loc34 = loc("acc_c1.c":14:25)
#loc35 = loc("acc_c1.c":14:13)
#loc36 = loc("acc_c1.c":17:5)
#loc37 = loc("acc_c1.c":17:22)
#loc38 = loc("acc_c1.c":17:9)
#loc39 = loc("acc_c1.c":17:14)
#loc40 = loc("acc_c1.c":17:11)
#loc41 = loc("acc_c1.c":17:18)
#loc42 = loc("acc_c1.c":19:24)
#loc43 = loc("acc_c1.c":19:28)
#loc44 = loc("acc_c1.c":19:40)
#loc45 = loc("acc_c1.c":19:17)
#loc46 = loc("acc_c1.c":19:41)
#loc47 = loc("acc_c1.c":19:5)
#loc48 = loc("acc_c1.c":20:24)
#loc49 = loc("acc_c1.c":20:28)
#loc50 = loc("acc_c1.c":20:40)
#loc51 = loc("acc_c1.c":20:17)
#loc52 = loc("acc_c1.c":20:41)
#loc53 = loc("acc_c1.c":20:5)
#loc54 = loc("acc_c1.c":21:24)
#loc55 = loc("acc_c1.c":21:28)
#loc56 = loc("acc_c1.c":21:40)
#loc57 = loc("acc_c1.c":21:17)
#loc58 = loc("acc_c1.c":21:41)
#loc59 = loc("acc_c1.c":21:5)
#loc60 = loc("acc_c1.c":31:39)
#loc61 = loc("acc_c1.c":31:41)
#loc62 = loc("acc_c1.c":31:37)
#loc63 = loc("acc_c1.c":31:55)
#loc64 = loc("acc_c1.c":31:57)
#loc65 = loc("acc_c1.c":31:53)
#loc66 = loc("acc_c1.c":31:5)
#loc67 = loc("acc_c1.c":32:5)
#loc68 = loc("acc_c1.c":35:5)
#loc69 = loc("acc_c1.c":32:14)
#loc70 = loc("acc_c1.c":32:10)
#loc71 = loc("acc_c1.c":32:17)
#loc72 = loc("acc_c1.c":32:21)
#loc73 = loc("acc_c1.c":32:19)
#loc74 = loc("acc_c1.c":33:5)
#loc75 = loc("acc_c1.c":34:18)
#loc76 = loc("acc_c1.c":34:16)
#loc77 = loc("acc_c1.c":34:19)
#loc78 = loc("acc_c1.c":34:23)
#loc79 = loc("acc_c1.c":34:11)
#loc80 = loc("acc_c1.c":34:9)
#loc81 = loc("acc_c1.c":34:12)
#loc82 = loc("acc_c1.c":32:24)
#loc83 = loc("acc_c1.c":32:26)
#loc84 = loc("acc_c1.c":31:60)
#loc85 = loc("acc_c1.c":51:10)
#loc86 = loc("acc_c1.c":51:5)
#loc87 = loc("acc_c1.c":52:10)
#loc88 = loc("acc_c1.c":52:5)
#loc89 = loc("acc_c1.c":53:10)
#loc90 = loc("acc_c1.c":53:5)
#loc91 = loc("acc_c1.c":55:12)
#loc92 = loc("acc_c1.c":55:5)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc95 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc7, #loc8])
#loc99 = loc(fused[#loc13, #loc14])
#loc100 = loc(fused[#loc15, #loc16])
#loc101 = loc(fused[#loc17, #loc18])
#loc102 = loc(fused[#loc19, #loc20])
#loc103 = loc(fused[#loc21, #loc22])
#loc104 = loc(fused[#loc24, #loc25])
#loc105 = loc(fused[#loc29, #loc30, #loc31, #loc25])
#loc106 = loc(fused[#loc29, #loc30])
#loc107 = loc(fused[#loc31, #loc25])
#loc108 = loc(fused[#loc36, #loc37])
#loc109 = loc(fused[#loc41, #loc37])
#loc110 = loc(fused[#loc43, #loc44])
#loc111 = loc(fused[#loc42, #loc44])
#loc112 = loc(fused[#loc45, #loc46])
#loc113 = loc(fused[#loc47, #loc46])
#loc114 = loc(fused[#loc49, #loc50])
#loc115 = loc(fused[#loc48, #loc50])
#loc116 = loc(fused[#loc51, #loc52])
#loc117 = loc(fused[#loc53, #loc52])
#loc118 = loc(fused[#loc55, #loc56])
#loc119 = loc(fused[#loc54, #loc56])
#loc120 = loc(fused[#loc57, #loc58])
#loc121 = loc(fused[#loc59, #loc58])
#loc122 = loc(fused[#loc67, #loc68])
#loc123 = loc(fused[#loc70, #loc69])
#loc124 = loc(fused[#loc74, #loc68])
#loc125 = loc(fused[#loc76, #loc78])
#loc126 = loc(fused[#loc80, #loc78])
#loc127 = loc(fused[#loc82, #loc83])
#loc128 = loc(fused[#loc92, #loc91])
